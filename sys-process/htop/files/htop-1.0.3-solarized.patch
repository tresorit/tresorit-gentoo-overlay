diff --git a/CRT.c b/CRT.c
index c0d1b82..8cfe6c4 100644
--- a/CRT.c
+++ b/CRT.c
@@ -28,6 +28,7 @@ in the source distribution for its full text.
 #define COLORSCHEME_BLACKONWHITE2 3
 #define COLORSCHEME_MIDNIGHT 4
 #define COLORSCHEME_BLACKNIGHT 5
+#define COLORSCHEME_SOLARIZED 6
 
 #define Black COLOR_BLACK
 #define Red COLOR_RED
@@ -568,6 +569,67 @@ void CRT_setColors(int colorScheme) {
       CRT_colors[CPU_SOFTIRQ] = ColorPair(Blue,Black);
       CRT_colors[CPU_STEAL] = ColorPair(Cyan,Black);
       CRT_colors[CPU_GUEST] = ColorPair(Cyan,Black);
+   } else if (CRT_colorScheme == COLORSCHEME_SOLARIZED) {
+      CRT_colors[RESET_COLOR] = ColorPair(Cyan,Black);
+      CRT_colors[DEFAULT_COLOR] = ColorPair(Cyan,Black);
+      CRT_colors[FUNCTION_BAR] = ColorPair(Black,Green);
+      CRT_colors[FUNCTION_KEY] = ColorPair(Cyan,Black);
+      CRT_colors[PANEL_HEADER_FOCUS] = ColorPair(Black,Green);
+      CRT_colors[PANEL_HEADER_UNFOCUS] = ColorPair(Black,Green);
+      CRT_colors[PANEL_HIGHLIGHT_FOCUS] = ColorPair(Black,Cyan);
+      CRT_colors[PANEL_HIGHLIGHT_UNFOCUS] = ColorPair(Black,White);
+      CRT_colors[FAILED_SEARCH] = ColorPair(Red,Cyan);
+      CRT_colors[UPTIME] = ColorPair(Green,Black);
+      CRT_colors[BATTERY] = ColorPair(Green,Black);
+      CRT_colors[LARGE_NUMBER] = A_BOLD | ColorPair(Red,Black);
+      CRT_colors[METER_TEXT] = ColorPair(Cyan,Black);
+      CRT_colors[METER_VALUE] = ColorPair(Green,Black);
+      CRT_colors[LED_COLOR] = ColorPair(Green,Black);
+      CRT_colors[TASKS_RUNNING] = A_BOLD | ColorPair(Green,Black);
+      CRT_colors[PROCESS] = ColorPair(Cyan,Black);
+      CRT_colors[PROCESS_SHADOW] = A_BOLD | ColorPair(Green,Black);
+      CRT_colors[PROCESS_TAG] = A_BOLD | ColorPair(Yellow,Black);
+      CRT_colors[PROCESS_MEGABYTES] = A_BOLD | ColorPair(Green,Black);
+      CRT_colors[PROCESS_BASENAME] = A_BOLD | ColorPair(Green,Black);
+      CRT_colors[PROCESS_TREE] = ColorPair(Cyan,Black);
+      CRT_colors[PROCESS_THREAD] = ColorPair(Green,Black);
+      CRT_colors[PROCESS_THREAD_BASENAME] = A_BOLD | ColorPair(Blue,Black);
+      CRT_colors[PROCESS_R_STATE] = ColorPair(Green,Black);
+      CRT_colors[PROCESS_HIGH_PRIORITY] = ColorPair(Red,Black);
+      CRT_colors[PROCESS_LOW_PRIORITY] = ColorPair(Red,Black);
+      CRT_colors[BAR_BORDER] = A_BOLD | ColorPair(Green,Black);
+      CRT_colors[BAR_SHADOW] = ColorPair(Green,Black);
+      CRT_colors[SWAP] = ColorPair(Red,Black);
+      CRT_colors[GRAPH_1] = A_BOLD | ColorPair(Red,Black);
+      CRT_colors[GRAPH_2] = ColorPair(Red,Black);
+      CRT_colors[GRAPH_3] = A_BOLD | ColorPair(Yellow,Black);
+      CRT_colors[GRAPH_4] = A_BOLD | ColorPair(Green,Black);
+      CRT_colors[GRAPH_5] = ColorPair(Green,Black);
+      CRT_colors[GRAPH_6] = ColorPair(Cyan,Black);
+      CRT_colors[GRAPH_7] = A_BOLD | ColorPair(Blue,Black);
+      CRT_colors[GRAPH_8] = ColorPair(Blue,Black);
+      CRT_colors[GRAPH_9] = A_BOLD | ColorPair(Green,Black);
+      CRT_colors[MEMORY_USED] = ColorPair(Green,Black);
+      CRT_colors[MEMORY_BUFFERS] = ColorPair(Blue,Black);
+      CRT_colors[MEMORY_CACHE] = ColorPair(Yellow,Black);
+      CRT_colors[LOAD_AVERAGE_FIFTEEN] = ColorPair(Green,Black);
+      CRT_colors[LOAD_AVERAGE_FIVE] = ColorPair(Green,Black);
+      CRT_colors[LOAD_AVERAGE_ONE] = A_BOLD | ColorPair(Green,Black);
+      CRT_colors[LOAD] = A_BOLD;
+      CRT_colors[HELP_BOLD] = A_BOLD | ColorPair(Cyan,Black);
+      CRT_colors[CLOCK] = ColorPair(Green,Black);
+      CRT_colors[CHECK_BOX] = ColorPair(Green,Black);
+      CRT_colors[CHECK_MARK] = A_BOLD | ColorPair(Green,Black);
+      CRT_colors[CHECK_TEXT] = ColorPair(Cyan,Black);
+      CRT_colors[HOSTNAME] = ColorPair(Green,Black);
+      CRT_colors[CPU_NICE] = ColorPair(Blue,Black);
+      CRT_colors[CPU_NORMAL] = ColorPair(Green,Black);
+      CRT_colors[CPU_KERNEL] = ColorPair(Red,Black);
+      CRT_colors[CPU_IOWAIT] = ColorPair(Green,Black);
+      CRT_colors[CPU_IRQ] = A_BOLD | ColorPair(Blue,Black);
+      CRT_colors[CPU_SOFTIRQ] = ColorPair(Blue,Black);
+      CRT_colors[CPU_STEAL] = ColorPair(Cyan,Black);
+      CRT_colors[CPU_GUEST] = ColorPair(Cyan,Black);
    } else {
       /* Default */
       CRT_colors[RESET_COLOR] = ColorPair(White,Black);
diff --git a/CRT.h b/CRT.h
index 883c675..750bf28 100644
--- a/CRT.h
+++ b/CRT.h
@@ -20,6 +20,7 @@ in the source distribution for its full text.
 #define COLORSCHEME_BLACKONWHITE2 3
 #define COLORSCHEME_MIDNIGHT 4
 #define COLORSCHEME_BLACKNIGHT 5
+#define COLORSCHEME_SOLARIZED 6
 
 #define Black COLOR_BLACK
 #define Red COLOR_RED
diff --git a/ColorsPanel.c b/ColorsPanel.c
index 4e28d01..bb97182 100644
--- a/ColorsPanel.c
+++ b/ColorsPanel.c
@@ -41,6 +41,7 @@ static const char* ColorSchemes[] = {
    "Light Terminal",
    "MC",
    "Black Night",
+   "Solarized",
    NULL
 };
 
diff --git a/Settings.c b/Settings.c
index cd9e6c1..c8cd060 100644
--- a/Settings.c
+++ b/Settings.c
@@ -135,7 +135,7 @@ static bool Settings_read(Settings* this, const char* fileName, int cpuCount) {
       } else if (String_eq(option[0], "color_scheme")) {
          this->colorScheme = atoi(option[1]);
          if (this->colorScheme < 0) this->colorScheme = 0;
-         if (this->colorScheme > 5) this->colorScheme = 5;
+         if (this->colorScheme > 6) this->colorScheme = 6;
       } else if (String_eq(option[0], "left_meters")) {
          Settings_readMeters(this, option[1], LEFT_HEADER);
          readMeters = true;
